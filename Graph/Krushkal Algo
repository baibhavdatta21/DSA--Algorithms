void makepar(int n, vector<int>&par)
    {
        for(int i=0;i<n;i++)
        {
            par[i]=i;
        }
    }
    int findpar(vector<int>&par,int i)
    {
        if(par[i]==i)
        return i;
        
        return par[i]=findpar(par,par[i]);
    }
    
    void un(int a,int b,vector<int>&rank,vector<int>&parent)
    {
        a=findpar(parent,a);
        b=findpar(parent,b);
        if(rank[a]>rank[b])
        parent[a]=b;
        else if(rank[a]<rank[b])
        parent[b]=a;
        else
        {
            parent[a]=b;
            rank[a]++;
        }
    }
    int spanningTree(int n, vector<vector<int>> adj[])
    {
       priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> pq;
          for(int i=0;i<n;i++)
       {
           for(auto it:adj[i])
           {
               pq.push({it[1],{i,it[0]}});
           }
       }
        vector<int>par(n);
        vector<int>rank(n,0);
        
        makepar(n,par);
        int sum=0;
       while(!pq.empty())
        {
            
            int wt=pq.top().first;
            int u=pq.top().second.first;
            int v=pq.top().second.second;
            pq.pop();
            if(findpar(par,u)!=findpar(par,v))
            {
                un(u,v,rank,par);
                sum+=wt;
            }
        }
        return sum;
    }
