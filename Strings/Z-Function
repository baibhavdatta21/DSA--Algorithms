It is one of the 3 methords used in matching of strnigs, It is a good approach, It does it in a time complexity of O(n+m)
Just like the kmp algo here also we make another array z-array and try to compute the ans
the z-array and lps array of kmp are different, here z array gives the longest substring which is also a prefix, lps array gives the length of the longest array 
which is also a suffix ans a prefix. In z we have to contatinate the string and then use it, both are diffent algos yet have the same time complexty.

vid ref->https://www.youtube.com/watch?v=CpZh4eF8QBw&t=928s(best)
article ref->https://www.geeksforgeeks.org/z-algorithm-linear-time-pattern-searching-algorithm/
problem ref->https://leetcode.com/problems/implement-strstr/


#include <bits/stdc++.h>
#include <math.h>
using namespace std;

#define ll long long

void computeZ(vector<int> &z,string b)
{
    int sz=b.size();
    int l=0;
    int r=0;
    z[0]=0;
    for(int i=1;i<sz;i++)
    {
        if(r<i)
        {
            l=r=i;
            while(r<sz && b[r]==b[r-l])
            r++;
            z[i]=r-l;
            r--;
        }
        else
        {
            int k1=i-l;
            if(z[k1]<r-i+1)
            z[i]=z[k1];
            else
            {
                l=i;
                while(r<sz && b[r]==b[r-l])
                r++;
                z[i]=r-l;
                r--;
            }

        }
    }
}    

int Z_func(string a, string b)
{
    int n=a.size();
    int m=b.size();
    if(m==0)
    return 0;
    string str=b+"#"+a;
    vector<int>z(m+n+1,0);
    computeZ(z,str);
    for(int i=0;i<m+n+1;i++)
    {
        if(z[i]>=m)
        return i-m-1;
    }
    return -1;
}

int main()
{
    string a,b;
    cin>>a>>b;
    cout<<Z_func(a,b);
    return 0;

}
